< README >
This is written for providing application of our paper "Improved prediction for breast cancer outcome by identifiying heterogeneous biomarkers".


< Chapter 1 >
We provide two files and one folders:
	CPR.py : contains class 'CPR' that is proposed in our paper.
		This module is dependent on 'numpy', 'scipy', and 'scikit-learn'.
		
	example.py : is example to show how to use CPR.py.

	pickle : contains for 8 pcl-files which are formatted by the 'pickle' module.
		There are genes, interactions, and three expression datasets that were used in our paper.
		We provide a function that loads the data easily, see in example.py.

		
< Chapter 2 >
CPR.py provides one class and one function.
1. class CPR:
	__init__(self,
			dampingFactor=0.7,
			n_biomarkers=70,
			n_clusters=2,
			n_pc=2,
			t_degree=0.02)
	
	setParam(self,
			dampingFactor=None,
			n_biomarkers=None,
			n_clusters=None,
			n_pc=None,
			t_degree=None)
		If user want to set parameters, please see chapter 3.
		
	getParam(self)
		This function only prints the parameters used in model,
		so it doesn't have a return value.
	
	fit(self, geneList, edgeList, data_train, label_train, randomState=None)
		This function make a model to fit.
		- geneList : list() for genes
			ex) [gene1, gene2, ...]
		- data_test : 2dim np.array() whose columns represent poor prognosis samples for test
			and rows represent genes ordered in the order on the geneList
		- label_test : 1dim np.array() for labels of samples
			The order of samples must be mapped with elemenes in data_test
		- randomState: This parameter is used for scikit-learn functinos
			Default value is set as None.
	
	etimate(self, geneList, data_test, label_test, randomState=None)
		This function returns only one estimator, the area under ROC curve (AUC).
		- geneList : list() for genes
			ex) [gene1, gene2, ...]
		- data_test : 2dim np.array() whose columns represent poor prognosis samples for test
			and rows represent genes ordered in the order on the geneList
		- label_test : 1dim np.array() for labels of samples
			The order of samples must be mapped with elemenes in data_test
		- randomState: This parameter is used for scikit-learn functinos
			Default value is set as None.
		
	print_rankedGenes(self, n_genes=None)
		This function only prints the prioritized genes in the fitted model,
		so it doesn't have a return value.
	
	print_biomarkers(self, n_genes=None)
		This function only prints the biomarkers in the fitted model,
		so it doesn't have a return value.
	
2. load_data():
	This function provide datasets that are used in our paper.
	A type of return value of the function is 'dictionary'.
	User can get a list of keys using '.keys()' and load data easily.
	
	
< Chapter 3 >
We describe about user parameters for users who do not want to use default values.
	dampingFactor : (default = 0.7)
		This is a hyper-parameter for PageRank.
		It must be selected between 0.0 and 1.0.
		
	n_biomarkers  : (default = 70)
		User can choose the number of biomarkers in classifier.
		It must be lower than 't_degree * total_of_genes',
		and should be bigger than 50.
	
	n_clusters    : (default = 2)
		This is a parameter for K-Means clustering.
		It can be selected by using well-known measures such as silhouette score.
		We recommend small number since big number may make cluster too small to analyze.
		
	n_pc          : (default = 2)
		This is a parameter for Principal Component Analysis.
		User can choose how many use the top principal components.
		
	t_degree      : (default = 0.02)
		This parameter restricts the number of candidates for biomarkers.
		When all genes are sorted by their degree in desending order, the candidates
		have degrees that are bigger than a degree of top n-th gene,
		where n = 'total_of_genes * t_degee'